// ==UserScript==
// @name         Faction Bank AutoFill (Bobbot)
// @namespace    http://tampermonkey.net/
// @version      1.2.5
// @description  Autofills name + balance in faction bank, working on PDA and desktop
// @author       OgBob
// @match        https://www.torn.com/factions.php*
// @grant        none
// ==/UserScript==

(async function () {
    'use strict';

    const targetName = "OgBob";
    const balanceRegex = /current balance is \$([\d,]+)/i;
    const log = (...args) => console.log("[AutoFill]", ...args);
    const sleep = ms => new Promise(r => setTimeout(r, ms));

    async function waitForInput(selector, timeout = 10000) {
        const start = Date.now();
        while (Date.now() - start < timeout) {
            const el = document.querySelector(selector);
            if (el) return el;
            await sleep(200);
        }
        return null;
    }

    async function autofill() {
        log("🚀 Autofill starting");

        // Fill name
        const nameInput = await waitForInput('input[name=searchAccount]');
        if (!nameInput) return log("❌ Name input not found");

        nameInput.focus();
        nameInput.value = targetName;
        nameInput.dispatchEvent(new Event('input', { bubbles: true }));
        log("✅ Name filled");

        await sleep(1000); // Wait for dropdown

        const items = [...document.querySelectorAll('[class*=userAutocompleteItem]')];
        const match = items.find(i => i.textContent.includes(targetName));
        if (match) {
            match.dispatchEvent(new MouseEvent('mousedown', { bubbles: true }));
            match.click();
            log("✅ Selected from dropdown");
        } else {
            log("❌ Dropdown match not found");
        }

        // Wait for balance info to load
        await sleep(1500);
        const textNodes = [...document.querySelectorAll("body *")]
            .map(el => el.textContent)
            .filter(text => text.includes("current balance"));

        const balanceText = textNodes.find(t => t.includes(targetName));
        if (!balanceText) return log("❌ Balance not found");

        const matchBal = balanceText.match(balanceRegex);
        if (!matchBal) return log("❌ Could not extract balance");

        const raw = matchBal[1].replace(/,/g, '');
        const amount = parseInt(raw, 10);
        log(`✅ Found balance: $${amount.toLocaleString()}`);

        const amountInput = await waitForInput('input.input-money');
        if (!amountInput) return log("❌ Amount input not found");

        amountInput.focus();
        amountInput.value = amount.toString();
        amountInput.dispatchEvent(new Event('input', { bubbles: true }));
        log("✅ Amount filled");

        if (amount > 50000000) {
            const popup = document.createElement("div");
            popup.innerText = `⚠️ $${amount.toLocaleString()} — OVERDRAW ALERT`;
            popup.style.position = "fixed";
            popup.style.bottom = "20px";
            popup.style.left = "20px";
            popup.style.background = "red";
            popup.style.color = "white";
            popup.style.padding = "10px";
            popup.style.zIndex = "99999";
            popup.style.fontSize = "18px";
            popup.style.borderRadius = "8px";
            document.body.appendChild(popup);
            log("❗ Overdraw warning displayed");
        }
    }

    window.addEventListener("load", () => setTimeout(autofill, 1500));
})();
