// ==UserScript==
// @name         Torn PDA Faction Bank AutoFill
// @namespace    http://tampermonkey.net/
// @version      1.2.6
// @description  Auto-fills the faction banking form (PDA compatible)
// @match        https://www.torn.com/factions.php*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    const targetName = "OgBob";
    const maxWait = 10000;

    function log(...args) {
        console.log("[AutoFill]", ...args);
    }

    function sleep(ms) {
        return new Promise(res => setTimeout(res, ms));
    }

    async function waitForInput(selector, timeout = maxWait) {
        const start = Date.now();
        while (Date.now() - start < timeout) {
            const el = document.querySelector(selector);
            if (el) return el;
            await sleep(100);
        }
        throw new Error(`Timeout waiting for ${selector}`);
    }

    async function waitForDropdownItem(name, timeout = 5000) {
        const start = Date.now();
        while (Date.now() - start < timeout) {
            const items = [...document.querySelectorAll('[class*=userAutocompleteItem]')];
            const match = items.find(i => i.textContent.includes(name));
            if (match) return match;
            await sleep(100);
        }
        return null;
    }

    async function runAutoFill() {
        log("üöÄ Autofill starting");

        // Find the name input
        const nameInput = await waitForInput('input.userAutocomplete___xqlGt');
        nameInput.focus();
        nameInput.value = targetName;

        // Trigger React to notice input change
        nameInput.dispatchEvent(new Event('input', { bubbles: true }));
        log("‚úÖ Name filled");

        // Wait for dropdown to appear and pick item
        const dropdownItem = await waitForDropdownItem(targetName);
        if (dropdownItem) {
            dropdownItem.dispatchEvent(new MouseEvent('mousedown', { bubbles: true }));
            dropdownItem.click();
            log("‚úÖ Selected from dropdown");
        } else {
            log("‚ùå Dropdown match not found");
        }

        // Attempt to find and fill balance
        const balanceSpan = [...document.querySelectorAll("span, p")]
            .find(e => e.textContent.includes("current balance is $"));
        if (!balanceSpan) return log("‚ùå Balance not found");

        const match = balanceSpan.textContent.match(/\$([\d,]+)/);
        if (!match) return log("‚ùå Could not extract balance");
        const balance = match[1].replace(/,/g, "");

        const moneyInput = document.querySelector("input.input-money");
        if (!moneyInput) return log("‚ùå Money input not found");

        moneyInput.value = balance;
        moneyInput.dispatchEvent(new Event("input", { bubbles: true }));
        log(`‚úÖ Balance filled: $${balance}`);
    }

    // Wait for DOM to stabilize and run
    window.addEventListener("load", () => {
        setTimeout(() => {
            runAutoFill().catch(e => log("‚ùå Script error:", e));
        }, 1000);
    });
})();
